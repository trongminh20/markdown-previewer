{"version":3,"sources":["AppContext.js","Components/Editor.jsx","Components/Previewer.jsx","App.js","index.js"],"names":["AppContext","createContext","AppContextProvider","props","useState","states","contentState","Provider","value","children","Editor","useContext","content","setContent","id","name","cols","rows","onChange","e","target","Previewer","dangerouslySetInnerHTML","__html","marked","App","ReactDOM","render","document","getElementById"],"mappings":"gPAEaA,EAAaC,0BAEbC,EAAqB,SAAAC,GAC9B,IA2CA,EAA8BC,mBA3Cb,spCA2CjB,mBACMC,EAAS,CACXC,aAAc,CAFlB,YAIA,OAAO,cAACN,EAAWO,SAAZ,CAAqBC,MAAOH,EAA5B,SACFF,EAAMM,Y,MCjDA,SAASC,IAEpB,IAAQJ,EAAiBK,qBAAWX,GAA5BM,aAER,cAA8BA,EAA9B,GAAOM,EAAP,KAAgBC,EAAhB,KAMA,OACI,0BAASC,GAAG,QAAZ,UACI,qBAAKA,GAAG,eAAR,SACI,0CAEJ,0BAAUA,GAAG,SAASC,KAAK,GAAGC,KAAK,KAAKC,KAAK,KAAKC,SATrC,SAAAC,GACjBN,EAAWM,EAAEC,OAAOZ,QAQhB,SACKI,O,MCdF,SAASS,IACpB,IAAQf,EAAiBK,qBAAWX,GAA5BM,aACR,cAA8BA,EAA9B,GAAOM,EAAP,UAIA,OACI,0BAASE,GAAG,SAAZ,UACI,qBAAKA,GAAG,gBAAR,SACI,2CAEJ,qBAAKA,GAAG,UACJQ,wBAAyB,CAAEC,OAAQC,iBAAOZ,S,MCb3C,SAASa,IAEpB,OACI,0BAASX,GAAG,OAAZ,UACI,0BAASA,GAAG,QAAZ,UACI,oDACA,iEAEJ,0BAASA,GAAG,MAAZ,UACI,cAACJ,EAAD,IACA,cAACW,EAAD,OAEJ,yBAASP,GAAG,SAAZ,mCCbZY,IAASC,OAAO,cAAC,EAAD,UACZ,cAACF,EAAD,MACmBG,SAASC,eAAe,W","file":"static/js/main.d64dc53e.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react'\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppContextProvider = props => {\r\n    const placeholder = `# Welcome to my React Markdown Previewer!\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`;\r\n\r\n    const [content, setContent] = useState(placeholder);\r\n    const states = {\r\n        contentState: [content, setContent]\r\n    }\r\n    return <AppContext.Provider value={states}>\r\n        {props.children}\r\n    </AppContext.Provider>\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { AppContext } from '../AppContext';\r\nimport '../SCSS/editor.scss';\r\n\r\nexport default function Editor() {\r\n\r\n    const { contentState } = useContext(AppContext);\r\n\r\n    const [content, setContent] = contentState;\r\n\r\n    const handleChange = e => {\r\n        setContent(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <section id=\"input\">\r\n            <div id=\"input-header\">\r\n                <h1>EDITOR</h1>\r\n            </div>\r\n            <textarea id=\"editor\" name=\"\" cols=\"60\" rows=\"20\" onChange={handleChange}>\r\n                {content}\r\n            </textarea>\r\n        </section>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { marked } from 'marked'\r\n\r\nimport { AppContext } from '../AppContext'\r\nimport '../SCSS/preview.scss';\r\n\r\nexport default function Previewer() {\r\n    const { contentState } = useContext(AppContext);\r\n    const [content, setContent] = contentState;\r\n    const showResult = () => {\r\n        return\r\n    }\r\n    return (\r\n        <section id=\"output\">\r\n            <div id=\"output-header\">\r\n                <h1>PREVIEW</h1>\r\n            </div>\r\n            <div id=\"preview\"\r\n                dangerouslySetInnerHTML={{ __html: marked(content) }}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { marked } from 'marked'\r\nimport Editor from './Components/Editor'\r\nimport Previewer from './Components/Previewer'\r\nimport \"./SCSS/main.scss\";\r\nexport default function App() {\r\n\r\n    return (\r\n        <section id=\"main\">\r\n            <section id=\"title\">\r\n                <h1>MARKDOWN PREVIEWER</h1>\r\n                <h4>FCC frontend library project</h4>\r\n            </section>\r\n            <section id=\"app\">\r\n                <Editor />\r\n                <Previewer />\r\n            </section>\r\n            <section id=\"author\">coded by Minh Phan</section>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { AppContextProvider } from './AppContext'\r\nReactDOM.render(<AppContextProvider>\r\n    <App />\r\n</AppContextProvider>, document.getElementById('root'));"],"sourceRoot":""}